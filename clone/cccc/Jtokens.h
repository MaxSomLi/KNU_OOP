#ifndef Jtokens_h
#define Jtokens_h
/* Jtokens.h -- List of labelled tokens and stuff
 *
 * Generated from: java.g
 *
 * Terence Parr, Will Cohen, and Hank Dietz: 1989-1999
 * Purdue University Electrical Engineering
 * ANTLR Version 1.33MR20
 */
enum ANTLRTokenType {
	Eof=1,
	QUESTION=2,
	LPAREN=3,
	RPAREN=4,
	LBRACK=5,
	RBRACK=6,
	LCURLY=7,
	RCURLY=8,
	COLON=9,
	COMMA=10,
	DOT=11,
	ASSIGN=12,
	EQUAL=13,
	LNOT=14,
	BNOT=15,
	NOT_EQUAL=16,
	DIV=17,
	DIV_ASSIGN=18,
	PLUS=19,
	PLUS_ASSIGN=20,
	INC=21,
	MINUS=22,
	MINUS_ASSIGN=23,
	DEC=24,
	STAR=25,
	STAR_ASSIGN=26,
	MOD=27,
	MOD_ASSIGN=28,
	SR=29,
	SR_ASSIGN=30,
	BSR=31,
	BSR_ASSIGN=32,
	GE=33,
	GT=34,
	SL=35,
	SL_ASSIGN=36,
	LE=37,
	LESSTHAN=38,
	BXOR=39,
	BXOR_ASSIGN=40,
	BOR=41,
	BOR_ASSIGN=42,
	LOR=43,
	BAND=44,
	BAND_ASSIGN=45,
	LAND=46,
	SEMI=47,
	WS=48,
	DOS_NL=49,
	MAC_NL=50,
	UNIX_NL=51,
	COMLINE=52,
	DOS_COMLINE_END=53,
	MAC_COMLINE_END=54,
	UNIX_COMLINE_END=55,
	COMLINE_ANYTHING=56,
	COMMULTI=57,
	COMMULTI_END=58,
	DOS_COMMULTI_EOL=59,
	MAC_COMMULTI_EOL=60,
	UNIX_COMMULTI_EOL=61,
	COMMULTI_ANYTHING=62,
	STRINGSTART=63,
	STRINGCONST=64,
	LYNNS_FIX=65,
	ESCAPED_DQUOTE=66,
	ESCAPED_OTHER=67,
	S_ANYTHING=68,
	CHARSTART=69,
	CHARCONST=70,
	CH_ANYTHING=71,
	ABSTRACT=72,
	KW_BOOLEAN=73,
	BREAK=74,
	KW_BYTE=75,
	CATCH=76,
	DEFAULT=77,
	KW_CHAR=78,
	CLASS=79,
	KW_CONST=80,
	CONTINUE=81,
	DO=82,
	KW_DOUBLE=83,
	ELSE=84,
	EXTENDS=85,
	BFALSE=86,
	FINAL=87,
	FINALLY=88,
	KW_FLOAT=89,
	FOR=90,
	IF=91,
	IMPLEMENTS=92,
	IMPORT=93,
	INSTANCEOF=94,
	KW_INT=95,
	INTERFACE=96,
	KW_LONG=97,
	NATIVE=98,
	NEW=99,
	PNULL=100,
	PACKAGE=101,
	PRIVATE=102,
	PROTECTED=103,
	PUBLIC=104,
	RETURN=105,
	KW_SHORT=106,
	SHUTUP=107,
	STATIC=108,
	SUPER=109,
	SWITCH=110,
	SYNCHRONIZED=111,
	THINGS=112,
	KW_THIS=113,
	THREADSAFE=114,
	THROW=115,
	THROWS=116,
	TRANSIENT=117,
	BTRUE=118,
	TRY=119,
	KW_VOID=120,
	VOLATILE=121,
	WHILE=122,
	CASE=123,
	IDENT=124,
	NUM_INT1=125,
	NUM_INT2=126,
	NUM_INT3=127,
	NUM_INT4=128,
	NUM_INT1A=129,
	NUM_INT1B=130,
	CompilationUnit=131,
	PackageDefinition=132,
	ImportDefinition=133,
	TypeDefinition=134,
	Declaration=135,
	Modifiers=136,
	TypeSpec=137,
	ClassTypeSpec=138,
	BuiltInTypeSpec=139,
	Type=140,
	BuiltInType=141,
	Identifier=142,
	TypeSpec2=143,
	ClassTypeSpec2=144,
	BuiltInTypeSpec2=145,
	Identifier2=146,
	IdentifierStar=147,
	Modifier=148,
	ClassDefinition=149,
	SuperClassClause=150,
	InterfaceDefinition=151,
	ClassBlock=152,
	InterfaceExtends=153,
	ImplementsClause=154,
	MoreSuperclassNames=155,
	Field=156,
	TypedDeclaration=157,
	MethodDefinition=158,
	VariableDefinitions=159,
	VariableDeclarator=160,
	DeclaratorBrackets=161,
	VarInitializer=162,
	ArrayInitializer=163,
	Initializer=164,
	CtorDefinition=165,
	CtorHead=166,
	ThrowsClause=167,
	ReturnTypeBrackersOnEndOfMethodHead=168,
	ParameterDeclarationList=169,
	ParameterDeclaration=170,
	ParameterDeclaratorBrackets=171,
	ParameterModifier=172,
	CompoundStatement=173,
	Statement=174,
	IfStatement=175,
	ForStatement=176,
	WhileStatement=177,
	DoWhileStatement=178,
	BreakStatement=179,
	ContinueStatement=180,
	ReturnStatement=181,
	SwitchStatement=182,
	ThrowStatement=183,
	SyncStatement=184,
	EmptyStatement=185,
	OptElseClause=186,
	CasesGroup=187,
	Cases=188,
	OptMoreCases=189,
	ACase=190,
	CaseSList=191,
	ForInit=192,
	ForCond=193,
	ForIter=194,
	TryBlock=195,
	Handler=196,
	Expression=197,
	ExpressionList=198,
	AssignmentExpression=199,
	ConditionalExpression=200,
	LogicalOrExpression=201,
	LogicalAndExpression=202,
	InclusiveOrExpression=203,
	ExclusiveOrExpression=204,
	AndExpression=205,
	EqualityExpression=206,
	RelationalPredicate=207,
	RelationalExpression=208,
	ShiftExpression=209,
	AdditiveExpression=210,
	MultiplicativeExpression=211,
	UnaryExpression=212,
	UnaryExpressionNotPlusMinus=213,
	PostfixExpression=214,
	PrimaryExpression=215,
	NewExpression=216,
	ArgList=217,
	NewArrayDeclarator=218,
	Constant=219,
	NUM_FLOAT=220,
	DLGminToken=0,
	DLGmaxToken=9999};

#endif
